//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputControllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControllers"",
    ""maps"": [
        {
            ""name"": ""Click"",
            ""id"": ""953dca18-6fb6-4509-9d87-ff0b7b871623"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c7784963-0197-4744-afe6-207890c6518d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickInput"",
                    ""type"": ""Button"",
                    ""id"": ""935111fe-6a97-452e-a8db-925072ce6873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9cb5913f-d95f-40b3-83fe-573ecb52a8f6"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d23960aa-0eca-44a4-8dfa-02e3e33736eb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Click
        m_Click = asset.FindActionMap("Click", throwIfNotFound: true);
        m_Click_TouchInput = m_Click.FindAction("TouchInput", throwIfNotFound: true);
        m_Click_ClickInput = m_Click.FindAction("ClickInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Click
    private readonly InputActionMap m_Click;
    private IClickActions m_ClickActionsCallbackInterface;
    private readonly InputAction m_Click_TouchInput;
    private readonly InputAction m_Click_ClickInput;
    public struct ClickActions
    {
        private @InputControllers m_Wrapper;
        public ClickActions(@InputControllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchInput => m_Wrapper.m_Click_TouchInput;
        public InputAction @ClickInput => m_Wrapper.m_Click_ClickInput;
        public InputActionMap Get() { return m_Wrapper.m_Click; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClickActions set) { return set.Get(); }
        public void SetCallbacks(IClickActions instance)
        {
            if (m_Wrapper.m_ClickActionsCallbackInterface != null)
            {
                @TouchInput.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnTouchInput;
                @TouchInput.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnTouchInput;
                @TouchInput.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnTouchInput;
                @ClickInput.started -= m_Wrapper.m_ClickActionsCallbackInterface.OnClickInput;
                @ClickInput.performed -= m_Wrapper.m_ClickActionsCallbackInterface.OnClickInput;
                @ClickInput.canceled -= m_Wrapper.m_ClickActionsCallbackInterface.OnClickInput;
            }
            m_Wrapper.m_ClickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
                @ClickInput.started += instance.OnClickInput;
                @ClickInput.performed += instance.OnClickInput;
                @ClickInput.canceled += instance.OnClickInput;
            }
        }
    }
    public ClickActions @Click => new ClickActions(this);
    public interface IClickActions
    {
        void OnTouchInput(InputAction.CallbackContext context);
        void OnClickInput(InputAction.CallbackContext context);
    }
}
